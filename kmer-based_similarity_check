#Load required libraries
library(Biostrings)
library(Matrix)

if (!interactive()) {
  #Define the options 
  option_list <- list(
    make_option(c("-g1", "--genome_path1"), type="character", default=NULL, help="Path to genome 1", metavar="character"),
    make_option(c("-g2", "--genome_path2"), type="character", default=NULL, help="Path to genome 2", metavar="character")
  )
  
  #Parse the options 
  opt_parser <- OptionParser(option_list=option_list)
  opt = parse_args(opt_parser)
  
  #If there is something missing, stop the code
  if (is.null(opt$genome_path1) | is.null(opt$genome_path2)){
    print_help(opt_parser)
    stop("At least one argument is missing.\n", call.=FALSE)
  }
  
} else {
  #Give the explicit path here 
  opt <- list()
  opt$genome_path1 <- "../Downloads/rlanei_15_flye.fasta"
  opt$genome_path2 <- "../Downloads/rlanei_15_hicanu.fasta"
}

#Function to generate k-mers from a sequence
generate_kmers <- function(sequence, k) {
  #Convert sequence to character vector if it's a DNAString
  if (class(sequence) == "DNAString") {
    sequence <- as.character(sequence)
  }
  
  #Generate all possible k-mers
  kmers <- vapply(
    seq_len(nchar(sequence) - k + 1),
    function(i) substr(sequence, i, i + k - 1),
    character(1)
  )
  
  #Return unique k-mers as a set (vector)
  unique(kmers)
}

#Calculate Jaccard similarity between two k-mer sets
calculate_jaccard <- function(set1, set2) {
  intersection <- length(intersect(set1, set2))
  union <- length(union(set1, set2))
  if (union == 0) return(0)
  return(intersection / union)
}

#Main function for k-mer analysis
kmer_genome_analysis <- function(genome_files, k = 31) {
  #Read genome sequences and generate k-mers
  genome_kmers <- list()
  genome_names <- names(genome_files)
  
  for (name in genome_names) {
    #Read FASTA file
    sequence <- readDNAStringSet(genome_files[name])[[1]]
    
    #Generate k-mers
    genome_kmers[[name]] <- generate_kmers(sequence, k)
    cat(sprintf("Generated %d unique %d-mers for %s\n", 
                length(genome_kmers[[name]]), k, name))
  }
  
  #Calculate similarity matrix
  n <- length(genome_names)
  similarity_matrix <- matrix(0, nrow = n, ncol = n)
  rownames(similarity_matrix) <- genome_names
  colnames(similarity_matrix) <- genome_names
  
  #Fill similarity matrix
  for (i in 1:n) {
    for (j in i:n) {
      sim <- calculate_jaccard(genome_kmers[[genome_names[i]]], 
                               genome_kmers[[genome_names[j]]])
      similarity_matrix[i, j] <- sim
      similarity_matrix[j, i] <- sim  #Matrix is symmetric
    }
  }
  
  return(similarity_matrix)
}

#Function to print formatted similarity matrix
print_similarity_matrix <- function(similarity_matrix) {
  cat("\nSimilarity Matrix (Jaccard Index):\n")
  cat(paste(rep("=", 80), collapse = ""), "\n")
  
  #Print the matrix with formatting
  print(round(similarity_matrix, 3))
}

genome_files <- c(
  "Genome1" = opt$genome_path1,
  "Genome2" = opt$genome_path2
)

#Run analysis
similarity_matrix <- kmer_genome_analysis(genome_files, k = 20)

#Print results
print_similarity_matrix(similarity_matrix)
